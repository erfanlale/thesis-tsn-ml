###############################################################
# PSFP-scenario-IntrusionML/simulations/omnetpp.ini
# 
# Complex In-Vehicle TSN Attack Scenario Simulation
# Features:
# - Multiple vehicle components with realistic traffic patterns
# - TSN time synchronization and basic QoS
# - Basic network communication (advanced TSN features commented out)
# - Prepared for future ML integration and attack scenarios
###############################################################

[General]
repeat = 10
seed-set = ${repetition}
network = AttackScenarioNetwork
sim-time-limit = 3s

# ML integration (DataCollector + Inference Engine)
# Unified results directory
*.dataCollector.outputFile = "simulations/results/tsn_signals_${configname}-#${repetition}.csv"
*.dataCollector.windowLength = 5ms
*.dataCollector.emitCSV = true

*.mlInferenceEngine.modelPath = "simulations/results/tsn_minimal7_fdeep.json"
*.mlInferenceEngine.normPath = "simulations/results/tsn_minimal7_norm.json"
*.mlInferenceEngine.inferenceInterval = 5ms
*.mlInferenceEngine.anomalyThreshold = 0.7

# ---- Interface Bitrate Configuration ----
# 1Gbps connections between main TSN switches and high-bandwidth devices
*.frontSwitch.eth[1..4].bitrate = 1Gbps         # Inter-switch connections + mainECU
*.frontSwitch.eth[8].bitrate = 1Gbps            # lidar (high-bandwidth sensor)
*.rearSwitch.eth[0..2].bitrate = 1Gbps          # Inter-switch connections  
*.frontLeftSwitch.eth[0].bitrate = 1Gbps        # frontSwitch connection
*.frontRightSwitch.eth[0].bitrate = 1Gbps       # frontSwitch connection
*.rearLeftSwitch.eth[0].bitrate = 1Gbps         # rearSwitch connection
*.rearRightSwitch.eth[0].bitrate = 1Gbps        # rearSwitch connection
*.mainECU.eth[0].bitrate = 1Gbps                # High-priority ECU
*.lidar.eth[0].bitrate = 1Gbps                  # High-bandwidth sensor

# Default 100Mbps for all other connections (master clock uses Eth100M channel default)
*.*.eth[*].bitrate = 100Mbps

# ---- Network Configuration ----
*.configurator.config = xml("<config><interface hosts='**' address='10.0.0.x' netmask='255.255.255.0'/></config>")

# ---- Basic TSN Configuration ---- 
# Use TSN devices and switches for proper timing
*.*Switch.typename = "TsnSwitch"
*.mainECU.typename = "TsnDevice"
*.obu.typename = "TsnDevice"
*.hud.typename = "TsnDevice"
*.rearDisplay.typename = "TsnDevice"
*.steering.typename = "TsnDevice"
*.engineActuator.typename = "TsnDevice"
*.*Wheel.typename = "TsnDevice"
*.lidar.typename = "TsnDevice"
*.*Camera.typename = "TsnDevice"
*.attackerExternal.typename = "TsnDevice"
*.compromisedNode.typename = "TsnDevice"
*.masterClock.typename = "TsnClock"

# ---- Time Synchronization Configuration ----
*.*.hasTimeSynchronization = true
*.*.clock.oscillator.driftRate = uniform(-50ppm, 50ppm)

# gPTP master configuration
*.masterClock.gptp.masterPorts = ["eth0"]

# gPTP bridge configuration for switches (PSFP topology)
*.frontSwitch.gptp.masterPorts = ["eth1", "eth2", "eth3", "eth4", "eth5", "eth6", "eth7", "eth8"]
*.rearSwitch.gptp.masterPorts = ["eth1", "eth2", "eth3", "eth4", "eth5"]
*.frontLeftSwitch.gptp.masterPorts = ["eth1", "eth2"]
*.frontRightSwitch.gptp.masterPorts = ["eth1", "eth2"]
*.rearLeftSwitch.gptp.masterPorts = ["eth1", "eth2"]
*.rearRightSwitch.gptp.masterPorts = ["eth1", "eth2"]

# ---- Basic TSN Stream Configuration ----
*.*.hasOutgoingStreams = true
*.*Switch.hasEgressTrafficShaping = true
*.*Switch.hasIngressTrafficFiltering = true

# ---- Critical Control Traffic (CDT) - Highest Priority ----
# Steering system (most critical)
*.steering.numApps = 1
*.steering.app[0].typename = "UdpSourceApp"
*.steering.app[0].source.packetNameFormat = "STEERING-%c"
*.steering.app[0].source.packetLength = 175B
*.steering.app[0].source.productionInterval = 250us  # 4kHz control rate
*.steering.app[0].io.destAddress = "mainECU"
*.steering.app[0].io.destPort = 6000
*.steering.app[0].source.clockModule = "^.^.clock"

# Wheel controllers (ABS, traction control) 
*.frontLeftWheel.numApps = 1
*.frontLeftWheel.app[0].typename = "UdpSourceApp"
*.frontLeftWheel.app[0].source.packetNameFormat = "WHEEL_FL-%c"
*.frontLeftWheel.app[0].source.packetLength = 175B
*.frontLeftWheel.app[0].source.productionInterval = 500us  # 2kHz
*.frontLeftWheel.app[0].io.destAddress = "mainECU"
*.frontLeftWheel.app[0].io.destPort = 6001
*.frontLeftWheel.app[0].source.clockModule = "^.^.clock"

*.frontRightWheel.numApps = 1
*.frontRightWheel.app[0].typename = "UdpSourceApp"
*.frontRightWheel.app[0].source.packetNameFormat = "WHEEL_FR-%c"
*.frontRightWheel.app[0].source.packetLength = 175B
*.frontRightWheel.app[0].source.productionInterval = 500us
*.frontRightWheel.app[0].io.destAddress = "mainECU"
*.frontRightWheel.app[0].io.destPort = 6002
*.frontRightWheel.app[0].source.clockModule = "^.^.clock"

*.rearLeftWheel.numApps = 1
*.rearLeftWheel.app[0].typename = "UdpSourceApp"
*.rearLeftWheel.app[0].source.packetNameFormat = "WHEEL_RL-%c"
*.rearLeftWheel.app[0].source.packetLength = 175B
*.rearLeftWheel.app[0].source.productionInterval = 500us
*.rearLeftWheel.app[0].io.destAddress = "mainECU"
*.rearLeftWheel.app[0].io.destPort = 6003
*.rearLeftWheel.app[0].source.clockModule = "^.^.clock"

*.rearRightWheel.numApps = 1
*.rearRightWheel.app[0].typename = "UdpSourceApp"
*.rearRightWheel.app[0].source.packetNameFormat = "WHEEL_RR-%c"
*.rearRightWheel.app[0].source.packetLength = 175B
*.rearRightWheel.app[0].source.productionInterval = 500us
*.rearRightWheel.app[0].io.destAddress = "mainECU"
*.rearRightWheel.app[0].io.destPort = 6004
*.rearRightWheel.app[0].source.clockModule = "^.^.clock"

# Engine actuator
*.engineActuator.numApps = 1
*.engineActuator.app[0].typename = "UdpSinkApp"
*.engineActuator.app[0].io.localPort = 6100

# ---- High-Bandwidth Sensor Traffic (Class A) ----
# LIDAR point cloud data
*.lidar.numApps = 1
*.lidar.app[0].typename = "UdpSourceApp"
*.lidar.app[0].source.packetNameFormat = "LIDAR-%c"
*.lidar.app[0].source.packetLength = 1300B  # Large point cloud packets
*.lidar.app[0].source.productionInterval = 100us  # 10kHz for dense point clouds
*.lidar.app[0].io.destAddress = "mainECU"
*.lidar.app[0].io.destPort = 5000
*.lidar.app[0].source.clockModule = "^.^.clock"

# Front cameras (video streams)
*.frontLeftCamera.numApps = 1
*.frontLeftCamera.app[0].typename = "UdpSourceApp"
*.frontLeftCamera.app[0].source.packetNameFormat = "CAM_FL-%c"
*.frontLeftCamera.app[0].source.packetLength = 650B  # Compressed video frames
*.frontLeftCamera.app[0].source.productionInterval = 125us  # ~160 FPS
*.frontLeftCamera.app[0].io.destAddress = "obu"
*.frontLeftCamera.app[0].io.destPort = 5001
*.frontLeftCamera.app[0].source.clockModule = "^.^.clock"

*.frontRightCamera.numApps = 1
*.frontRightCamera.app[0].typename = "UdpSourceApp"
*.frontRightCamera.app[0].source.packetNameFormat = "CAM_FR-%c"
*.frontRightCamera.app[0].source.packetLength = 650B
*.frontRightCamera.app[0].source.productionInterval = 125us
*.frontRightCamera.app[0].io.destAddress = "obu"
*.frontRightCamera.app[0].io.destPort = 5002
*.frontRightCamera.app[0].source.clockModule = "^.^.clock"

# Rear cameras (lower priority)
*.rearLeftCamera.numApps = 1
*.rearLeftCamera.app[0].typename = "UdpSourceApp"
*.rearLeftCamera.app[0].source.packetNameFormat = "CAM_RL-%c"
*.rearLeftCamera.app[0].source.packetLength = 325B
*.rearLeftCamera.app[0].source.productionInterval = 250us  # 80 FPS
*.rearLeftCamera.app[0].io.destAddress = "rearDisplay"
*.rearLeftCamera.app[0].io.destPort = 5003
*.rearLeftCamera.app[0].source.clockModule = "^.^.clock"

*.rearRightCamera.numApps = 1
*.rearRightCamera.app[0].typename = "UdpSourceApp"
*.rearRightCamera.app[0].source.packetNameFormat = "CAM_RR-%c"
*.rearRightCamera.app[0].source.packetLength = 325B
*.rearRightCamera.app[0].source.productionInterval = 250us
*.rearRightCamera.app[0].io.destAddress = "rearDisplay"
*.rearRightCamera.app[0].io.destPort = 5004
*.rearRightCamera.app[0].source.clockModule = "^.^.clock"

# ---- Central Processing Units - Sink Applications ----
# Main ECU (receives critical control data)
*.mainECU.numApps = 6
*.mainECU.app[0].typename = "UdpSinkApp"
*.mainECU.app[0].io.localPort = 6000  # Steering
*.mainECU.app[1].typename = "UdpSinkApp"
*.mainECU.app[1].io.localPort = 6001  # Front left wheel
*.mainECU.app[2].typename = "UdpSinkApp"
*.mainECU.app[2].io.localPort = 6002  # Front right wheel
*.mainECU.app[3].typename = "UdpSinkApp"
*.mainECU.app[3].io.localPort = 6003  # Rear left wheel
*.mainECU.app[4].typename = "UdpSinkApp"
*.mainECU.app[4].io.localPort = 6004  # Rear right wheel
*.mainECU.app[5].typename = "UdpSinkApp"
*.mainECU.app[5].io.localPort = 5000  # LIDAR

# OBU (receives camera streams)
*.obu.numApps = 2
*.obu.app[0].typename = "UdpSinkApp"
*.obu.app[0].io.localPort = 5001  # Front left camera
*.obu.app[1].typename = "UdpSinkApp"
*.obu.app[1].io.localPort = 5002  # Front right camera

# Rear Display (receives rear camera streams)
*.rearDisplay.numApps = 2
*.rearDisplay.app[0].typename = "UdpSinkApp"
*.rearDisplay.app[0].io.localPort = 5003  # Rear left camera
*.rearDisplay.app[1].typename = "UdpSinkApp"
*.rearDisplay.app[1].io.localPort = 5004  # Rear right camera

# HUD (receives summary data)
*.hud.numApps = 1
*.hud.app[0].typename = "UdpSinkApp"
*.hud.app[0].io.localPort = 7000

# ---- PSFP CONFIGURATION ----
# Per-Stream Filtering and Policing (PSFP) configuration based on IEEE 802.1Qci

# Stream identification and classification
*.*Switch.bridging.streamCoder.decoder.mapping = [{source: "steering", pcp: 6, stream: "steering"},
                                                  {source: "frontLeftWheel", pcp: 6, stream: "front_left_wheel"},
                                                  {source: "frontRightWheel", pcp: 6, stream: "front_right_wheel"},
                                                  {source: "rearLeftWheel", pcp: 6, stream: "rear_left_wheel"},
                                                  {source: "rearRightWheel", pcp: 6, stream: "rear_right_wheel"},
                                                  {source: "lidar", pcp: 5, stream: "lidar"},
                                                  {source: "frontLeftCamera", pcp: 5, stream: "front_left_camera"},
                                                  {source: "frontRightCamera", pcp: 5, stream: "front_right_camera"},
                                                  {source: "rearLeftCamera", pcp: 5, stream: "rear_left_camera"},
                                                  {source: "rearRightCamera", pcp: 5, stream: "rear_right_camera"},
                                                  {source: "attackerExternal", pcp: 0, stream: "attacker_external"},
                                                  {source: "compromisedNode", pcp: 0, stream: "compromised_node"}]

*.*Switch.bridging.streamCoder.encoder.mapping = [{stream: "steering", pcp: 6},
                                                  {stream: "front_left_wheel", pcp: 6},
                                                  {stream: "front_right_wheel", pcp: 6},
                                                  {stream: "rear_left_wheel", pcp: 6},
                                                  {stream: "rear_right_wheel", pcp: 6},
                                                  {stream: "lidar", pcp: 5},
                                                  {stream: "front_left_camera", pcp: 5},
                                                  {stream: "front_right_camera", pcp: 5},
                                                  {stream: "rear_left_camera", pcp: 5},
                                                  {stream: "rear_right_camera", pcp: 5},
                                                  {stream: "attacker_external", pcp: 0},
                                                  {stream: "compromised_node", pcp: 0}]

# Stream filtering configuration
*.*Switch.bridging.streamFilter.ingress.numStreams = 12
*.*Switch.bridging.streamFilter.ingress.classifier.mapping = {"steering": 0, "front_left_wheel": 1, "front_right_wheel": 2, "rear_left_wheel": 3, "rear_right_wheel": 4, "lidar": 5, "front_left_camera": 6, "front_right_camera": 7, "rear_left_camera": 8, "rear_right_camera": 9, "attacker_external": 10, "compromised_node": 11}

# Stream metering configuration
*.*Switch.bridging.streamFilter.ingress.meter[*].typename = "SingleRateTwoColorMeter"

# Set display names for better visualization
*.*Switch.bridging.streamFilter.ingress.meter[0].display-name = "steering"
*.*Switch.bridging.streamFilter.ingress.meter[1].display-name = "front_left_wheel"
*.*Switch.bridging.streamFilter.ingress.meter[2].display-name = "front_right_wheel"
*.*Switch.bridging.streamFilter.ingress.meter[3].display-name = "rear_left_wheel"
*.*Switch.bridging.streamFilter.ingress.meter[4].display-name = "rear_right_wheel"
*.*Switch.bridging.streamFilter.ingress.meter[5].display-name = "lidar"
*.*Switch.bridging.streamFilter.ingress.meter[6].display-name = "front_left_camera"
*.*Switch.bridging.streamFilter.ingress.meter[7].display-name = "front_right_camera"
*.*Switch.bridging.streamFilter.ingress.meter[8].display-name = "rear_left_camera"
*.*Switch.bridging.streamFilter.ingress.meter[9].display-name = "rear_right_camera"
*.*Switch.bridging.streamFilter.ingress.meter[10].display-name = "attacker_external"
*.*Switch.bridging.streamFilter.ingress.meter[11].display-name = "compromised_node"

# Configure committed information rates and burst sizes for each stream
# Critical control traffic
*.*Switch.bridging.streamFilter.ingress.meter[0..4].committedInformationRate = 5Mbps
*.*Switch.bridging.streamFilter.ingress.meter[0..4].committedBurstSize = 10kB

# Sensor traffic
*.*Switch.bridging.streamFilter.ingress.meter[5].committedInformationRate = 100Mbps
*.*Switch.bridging.streamFilter.ingress.meter[5].committedBurstSize = 40kB

# Camera traffic
*.*Switch.bridging.streamFilter.ingress.meter[6..9].committedInformationRate = 50Mbps
*.*Switch.bridging.streamFilter.ingress.meter[6..9].committedBurstSize = 20kB

# Attacker traffic (same as legitimate to allow detection based on behavior)
*.*Switch.bridging.streamFilter.ingress.meter[10..11].committedInformationRate = 10Mbps
*.*Switch.bridging.streamFilter.ingress.meter[10..11].committedBurstSize = 10kB

# Stream identification in end devices
*.steering.bridging.streamIdentifier.identifier.mapping = [{stream: "steering", packetFilter: expr(has(udp))}]
*.steering.bridging.streamCoder.encoder.mapping = [{stream: "steering", pcp: 6}]

*.*Wheel.bridging.streamIdentifier.identifier.mapping = [{stream: "wheel", packetFilter: expr(has(udp))}]
*.*Wheel.bridging.streamCoder.encoder.mapping = [{stream: "wheel", pcp: 6}]

*.lidar.bridging.streamIdentifier.identifier.mapping = [{stream: "lidar", packetFilter: expr(has(udp))}]
*.lidar.bridging.streamCoder.encoder.mapping = [{stream: "lidar", pcp: 5}]

*.*Camera.bridging.streamIdentifier.identifier.mapping = [{stream: "camera", packetFilter: expr(has(udp))}]
*.*Camera.bridging.streamCoder.encoder.mapping = [{stream: "camera", pcp: 5}]

# Time-aware shaping configuration
*.*Switch.eth[*].macLayer.queue.numTrafficClasses = 8
*.*Switch.eth[*].macLayer.queue.classifier.typename = "PcpClassifier"
*.*Switch.eth[*].macLayer.queue.classifier.pcpToGateIndex = [0, 1, 2, 3, 4, 5, 6, 7]

# ---- TSN METRICS RECORDING CONFIGURATION ----
# Record all critical TSN and PSFP metrics for ML analysis

# 1. End-to-End Delay Metrics
**.app[*].endToEndDelay:vector.result-recording-modes = all
**.app[*].endToEndDelay:vector.vector-recording = true

# 2. Throughput Metrics
**.bitrate:vector.result-recording-modes = all
**.bitrate:vector.vector-recording = true
**.throughput:vector.result-recording-modes = all
**.throughput:vector.vector-recording = true

# 3. Queue Length Metrics
**.queue.queueLength:vector.result-recording-modes = all
**.queue.queueLength:vector.vector-recording = true
**.queue.queueingTime:vector.result-recording-modes = all
**.queue.queueingTime:vector.vector-recording = true

# 4. Packet Drop Rate Metrics
**.packetDropped:count.result-recording-modes = all
**.packetDropped:vector.result-recording-modes = all
**.packetDropped:vector.vector-recording = true

# 5. Total Packets Metrics
**.packetSent:count.result-recording-modes = all
**.packetReceived:count.result-recording-modes = all

# 6. PSFP-Specific Metrics
**.bridging.streamFilter.ingress.meter[*].committedConformingPackets:count.result-recording-modes = all
**.bridging.streamFilter.ingress.meter[*].committedNonConformingPackets:count.result-recording-modes = all
**.bridging.streamFilter.ingress.meter[*].packetFiltered:count.result-recording-modes = all
**.bridging.streamFilter.ingress.meter[*].packetFiltered:vector.result-recording-modes = all
**.bridging.streamFilter.ingress.meter[*].packetFiltered:vector.vector-recording = true

# 7. TSN Time Synchronization Metrics
**.gptp.clockServo.offsetNanoseconds:vector.result-recording-modes = all
**.gptp.clockServo.offsetNanoseconds:vector.vector-recording = true
**.gptp.clockServo.driftPpm:vector.result-recording-modes = all
**.gptp.clockServo.driftPpm:vector.vector-recording = true

# 8. Stream Classification Metrics
**.bridging.streamCoder.packetEncoded:count.result-recording-modes = all
**.bridging.streamCoder.packetDecoded:count.result-recording-modes = all
**.bridging.streamIdentifier.packetClassified:count.result-recording-modes = all

# 9. Traffic Shaping Metrics
**.queue.transmissionGate[*].gateStateChanged:vector.result-recording-modes = all
**.queue.transmissionGate[*].gateStateChanged:vector.vector-recording = true
**.queue.transmissionSelectionAlgorithm[*].credit:vector.result-recording-modes = all
**.queue.transmissionSelectionAlgorithm[*].credit:vector.vector-recording = true

# ---- ATTACK SCENARIOS CONFIGURATION ----
# Attack components are present in network but applications disabled for baseline

# Disable attack applications by default (enabled in specific configs)
*.attackerExternal.numApps = 0
*.compromisedNode.numApps = 0

# ---- Enhanced Visualization Configuration ----
*.visualizer.typename = "IntegratedMultiCanvasVisualizer"

# Data link activity visualization with color coding
*.visualizer.numDataLinkVisualizers = 3
*.visualizer.dataLinkVisualizer[0].displayLinks = true
*.visualizer.dataLinkVisualizer[0].activityLevel = "protocol"
*.visualizer.dataLinkVisualizer[0].packetFilter = "*STEERING* or *WHEEL*"
*.visualizer.dataLinkVisualizer[0].lineColor = "red"
*.visualizer.dataLinkVisualizer[0].labelColor = "red"
*.visualizer.dataLinkVisualizer[0].fadeOutMode = "simulationTime"
*.visualizer.dataLinkVisualizer[0].fadeOutTime = 0.5s

*.visualizer.dataLinkVisualizer[1].displayLinks = true
*.visualizer.dataLinkVisualizer[1].activityLevel = "protocol"
*.visualizer.dataLinkVisualizer[1].packetFilter = "*LIDAR* or *CAM*"
*.visualizer.dataLinkVisualizer[1].lineColor = "blue"
*.visualizer.dataLinkVisualizer[1].labelColor = "blue"
*.visualizer.dataLinkVisualizer[1].fadeOutMode = "simulationTime"
*.visualizer.dataLinkVisualizer[1].fadeOutTime = 0.3s

*.visualizer.dataLinkVisualizer[2].displayLinks = true
*.visualizer.dataLinkVisualizer[2].activityLevel = "protocol"
*.visualizer.dataLinkVisualizer[2].packetFilter = "*DOS* or *ATTACK* or *SPOOF*"
*.visualizer.dataLinkVisualizer[2].lineColor = "red"
*.visualizer.dataLinkVisualizer[2].labelColor = "red"
*.visualizer.dataLinkVisualizer[2].lineStyle = "dashed"
*.visualizer.dataLinkVisualizer[2].fadeOutMode = "simulationTime"
*.visualizer.dataLinkVisualizer[2].fadeOutTime = 1s

# Physical environment visualization
*.visualizer.physicalEnvironmentVisualizer.displayObjects = true
*.visualizer.sceneVisualizer.descriptionFigure = "Vehicle TSN Network - In-Vehicle Attack Scenarios"

# Interface table visualization
*.visualizer.interfaceTableVisualizer.displayInterfaceTables = true
*.visualizer.interfaceTableVisualizer.format = "address/netmask"

# Mobility visualization (static for vehicle components)
*.visualizer.mobilityVisualizer.displayMobility = true
*.visualizer.mobilityVisualizer.displayPositions = true

# Statistical visualization
*.visualizer.statisticVisualizer.displayStatistics = true
*.visualizer.statisticVisualizer.signalName = "packetReceived"
*.visualizer.statisticVisualizer.sourceFilter = "**.app[*]"
*.visualizer.statisticVisualizer.format = "count"

# ---- Statistics Collection ----
*.**.result-recording-modes = all

# ---- Scenario Configuration Presets ----

[Config Baseline]
extends = General
description = "Baseline TSN Network - Normal operation without attacks"

# ---- Attack Scenario Configurations ----

[Config DoSFlooding]
description = "DoS flooding attack targeting critical systems (1-2s)"
extends = General
sim-time-limit = 3s

# Attack starts at 1 second, floods steering and mainECU
*.attackerExternal.numApps = 1
*.attackerExternal.app[0].typename = "UdpSourceApp"
*.attackerExternal.app[0].source.packetNameFormat = "DOS_FLOOD-%c"
*.attackerExternal.app[0].source.packetLength = 1500B  # Large packets
*.attackerExternal.app[0].source.productionInterval = 10us  # Very high rate
*.attackerExternal.app[0].source.startTime = 1s
*.attackerExternal.app[0].source.stopTime = 2s
*.attackerExternal.app[0].io.destAddress = "mainECU"
*.attackerExternal.app[0].io.destPort = 6000  # Target steering port

[Config SpoofingAttack]  
description = "Spoofing attack impersonating wheel controllers (0.5-1.5s)"
extends = General
sim-time-limit = 3s

# Compromised node impersonates front left wheel
*.compromisedNode.numApps = 1
*.compromisedNode.app[0].typename = "UdpSourceApp"
*.compromisedNode.app[0].source.packetNameFormat = "SPOOFED_WHEEL_FL-%c"
*.compromisedNode.app[0].source.packetLength = 175B
*.compromisedNode.app[0].source.productionInterval = 100us  # Faster than normal
*.compromisedNode.app[0].source.startTime = 0.5s
*.compromisedNode.app[0].source.stopTime = 1.5s
*.compromisedNode.app[0].io.destAddress = "mainECU"
*.compromisedNode.app[0].io.destPort = 6001  # Same port as frontLeftWheel

[Config MixedAttacks]
description = "Multiple simultaneous attacks (0.5-2.5s)"
extends = General
sim-time-limit = 3s

# External attacker: DoS flood
*.attackerExternal.numApps = 1
*.attackerExternal.app[0].typename = "UdpSourceApp"
*.attackerExternal.app[0].source.packetNameFormat = "DOS_ATTACK-%c"
*.attackerExternal.app[0].source.packetLength = 1400B
*.attackerExternal.app[0].source.productionInterval = 20us
*.attackerExternal.app[0].source.startTime = 1s
*.attackerExternal.app[0].source.stopTime = 2.5s
*.attackerExternal.app[0].io.destAddress = "mainECU"
*.attackerExternal.app[0].io.destPort = 6000

# Compromised node: Spoofing + timing disruption
*.compromisedNode.numApps = 2
*.compromisedNode.app[0].typename = "UdpSourceApp"
*.compromisedNode.app[0].source.packetNameFormat = "SPOOF-%c"
*.compromisedNode.app[0].source.packetLength = 175B
*.compromisedNode.app[0].source.productionInterval = 50us  # Much faster
*.compromisedNode.app[0].source.startTime = 0.5s
*.compromisedNode.app[0].source.stopTime = 2s
*.compromisedNode.app[0].io.destAddress = "mainECU"
*.compromisedNode.app[0].io.destPort = 6002  # Target front right wheel

*.compromisedNode.app[1].typename = "UdpSourceApp"
*.compromisedNode.app[1].source.packetNameFormat = "TIMING_ATTACK-%c"
*.compromisedNode.app[1].source.packetLength = 64B  # Small frequent packets
*.compromisedNode.app[1].source.productionInterval = 5us  # Very high frequency
*.compromisedNode.app[1].source.startTime = 1.5s
*.compromisedNode.app[1].source.stopTime = 2.5s
*.compromisedNode.app[1].io.destAddress = "steering"
*.compromisedNode.app[1].io.destPort = 9999  # Different port

[Config TimingAttack]
description = "Clock drift attack disrupting TSN synchronization (continuous)"
extends = General
sim-time-limit = 3s

# Introduce severe clock drift in compromised node
*.compromisedNode.clock.oscillator.driftRate = 1000ppm  # Very high drift
*.compromisedNode.**.oscillator.driftRateChange = 500ppm
*.compromisedNode.**.oscillator.changeInterval = 100ms

# Also send disrupting packets
*.compromisedNode.numApps = 1
*.compromisedNode.app[0].typename = "UdpSourceApp"
*.compromisedNode.app[0].source.packetNameFormat = "TIMING_DISRUPTION-%c"
*.compromisedNode.app[0].source.packetLength = 32B
*.compromisedNode.app[0].source.productionInterval = uniform(1us, 50us)  # Random timing
*.compromisedNode.app[0].source.startTime = 0.1s
*.compromisedNode.app[0].io.destAddress = "masterClock"
*.compromisedNode.app[0].io.destPort = 8888
